{"ast":null,"code":"export const toNumber = v => typeof v === \"number\" ? v : parseFloat((v || \"0\").toString().replace(/,/g, \"\"));\nexport const fmt = n => n.toLocaleString(undefined, {\n  style: \"currency\",\n  currency: \"CAD\",\n  maximumFractionDigits: 2\n});\n\n/** Monthly payment for principal P, annual rate (percent), years N */\nexport function mortgagePayment(principal, annualRatePct, years) {\n  const r = annualRatePct / 100 / 12; // monthly rate\n  const n = years * 12; // number of payments\n  if (r === 0) return principal / n;\n  const pow = Math.pow(1 + r, n);\n  return principal * (r * pow) / (pow - 1);\n}\n\n/** Invert payment to get principal you can afford for a payment M */\nexport function principalFromPayment(M, annualRatePct, years) {\n  const r = annualRatePct / 100 / 12;\n  const n = years * 12;\n  if (r === 0) return M * n;\n  const pow = Math.pow(1 + r, n);\n  return M * (pow - 1) / (r * pow);\n}\n\n/** Amortization schedule (lightweight equity estimate) */\nexport function principalPaidOverYears(principal, annualRatePct, years, horizonYears) {\n  const r = annualRatePct / 100 / 12;\n  const n = years * 12;\n  const m = mortgagePayment(principal, annualRatePct, years);\n  let balance = principal;\n  let paidPrincipal = 0;\n  for (let i = 0; i < Math.min(horizonYears * 12, n); i++) {\n    const interest = balance * r;\n    const principalPart = Math.max(0, m - interest);\n    balance = Math.max(0, balance - principalPart);\n    paidPrincipal += principalPart;\n  }\n  return {\n    paidPrincipal,\n    balance\n  };\n}","map":{"version":3,"names":["toNumber","v","parseFloat","toString","replace","fmt","n","toLocaleString","undefined","style","currency","maximumFractionDigits","mortgagePayment","principal","annualRatePct","years","r","pow","Math","principalFromPayment","M","principalPaidOverYears","horizonYears","m","balance","paidPrincipal","i","min","interest","principalPart","max"],"sources":["D:/centum_hero_react/centum_hero_react/src/lib/mortgage.js"],"sourcesContent":["export const toNumber = (v) =>\r\n    typeof v === \"number\" ? v : parseFloat((v || \"0\").toString().replace(/,/g, \"\"));\r\n\r\nexport const fmt = (n) =>\r\n    n.toLocaleString(undefined, { style: \"currency\", currency: \"CAD\", maximumFractionDigits: 2 });\r\n\r\n/** Monthly payment for principal P, annual rate (percent), years N */\r\nexport function mortgagePayment(principal, annualRatePct, years) {\r\n    const r = annualRatePct / 100 / 12; // monthly rate\r\n    const n = years * 12;               // number of payments\r\n    if (r === 0) return principal / n;\r\n    const pow = Math.pow(1 + r, n);\r\n    return principal * (r * pow) / (pow - 1);\r\n}\r\n\r\n/** Invert payment to get principal you can afford for a payment M */\r\nexport function principalFromPayment(M, annualRatePct, years) {\r\n    const r = annualRatePct / 100 / 12;\r\n    const n = years * 12;\r\n    if (r === 0) return M * n;\r\n    const pow = Math.pow(1 + r, n);\r\n    return M * (pow - 1) / (r * pow);\r\n}\r\n\r\n/** Amortization schedule (lightweight equity estimate) */\r\nexport function principalPaidOverYears(principal, annualRatePct, years, horizonYears) {\r\n    const r = annualRatePct / 100 / 12;\r\n    const n = years * 12;\r\n    const m = mortgagePayment(principal, annualRatePct, years);\r\n    let balance = principal;\r\n    let paidPrincipal = 0;\r\n\r\n    for (let i = 0; i < Math.min(horizonYears * 12, n); i++) {\r\n        const interest = balance * r;\r\n        const principalPart = Math.max(0, m - interest);\r\n        balance = Math.max(0, balance - principalPart);\r\n        paidPrincipal += principalPart;\r\n    }\r\n    return { paidPrincipal, balance };\r\n}\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAIC,CAAC,IACtB,OAAOA,CAAC,KAAK,QAAQ,GAAGA,CAAC,GAAGC,UAAU,CAAC,CAACD,CAAC,IAAI,GAAG,EAAEE,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAEnF,OAAO,MAAMC,GAAG,GAAIC,CAAC,IACjBA,CAAC,CAACC,cAAc,CAACC,SAAS,EAAE;EAAEC,KAAK,EAAE,UAAU;EAAEC,QAAQ,EAAE,KAAK;EAAEC,qBAAqB,EAAE;AAAE,CAAC,CAAC;;AAEjG;AACA,OAAO,SAASC,eAAeA,CAACC,SAAS,EAAEC,aAAa,EAAEC,KAAK,EAAE;EAC7D,MAAMC,CAAC,GAAGF,aAAa,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;EACpC,MAAMR,CAAC,GAAGS,KAAK,GAAG,EAAE,CAAC,CAAe;EACpC,IAAIC,CAAC,KAAK,CAAC,EAAE,OAAOH,SAAS,GAAGP,CAAC;EACjC,MAAMW,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,GAAGD,CAAC,EAAEV,CAAC,CAAC;EAC9B,OAAOO,SAAS,IAAIG,CAAC,GAAGC,GAAG,CAAC,IAAIA,GAAG,GAAG,CAAC,CAAC;AAC5C;;AAEA;AACA,OAAO,SAASE,oBAAoBA,CAACC,CAAC,EAAEN,aAAa,EAAEC,KAAK,EAAE;EAC1D,MAAMC,CAAC,GAAGF,aAAa,GAAG,GAAG,GAAG,EAAE;EAClC,MAAMR,CAAC,GAAGS,KAAK,GAAG,EAAE;EACpB,IAAIC,CAAC,KAAK,CAAC,EAAE,OAAOI,CAAC,GAAGd,CAAC;EACzB,MAAMW,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,GAAGD,CAAC,EAAEV,CAAC,CAAC;EAC9B,OAAOc,CAAC,IAAIH,GAAG,GAAG,CAAC,CAAC,IAAID,CAAC,GAAGC,GAAG,CAAC;AACpC;;AAEA;AACA,OAAO,SAASI,sBAAsBA,CAACR,SAAS,EAAEC,aAAa,EAAEC,KAAK,EAAEO,YAAY,EAAE;EAClF,MAAMN,CAAC,GAAGF,aAAa,GAAG,GAAG,GAAG,EAAE;EAClC,MAAMR,CAAC,GAAGS,KAAK,GAAG,EAAE;EACpB,MAAMQ,CAAC,GAAGX,eAAe,CAACC,SAAS,EAAEC,aAAa,EAAEC,KAAK,CAAC;EAC1D,IAAIS,OAAO,GAAGX,SAAS;EACvB,IAAIY,aAAa,GAAG,CAAC;EAErB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,IAAI,CAACS,GAAG,CAACL,YAAY,GAAG,EAAE,EAAEhB,CAAC,CAAC,EAAEoB,CAAC,EAAE,EAAE;IACrD,MAAME,QAAQ,GAAGJ,OAAO,GAAGR,CAAC;IAC5B,MAAMa,aAAa,GAAGX,IAAI,CAACY,GAAG,CAAC,CAAC,EAAEP,CAAC,GAAGK,QAAQ,CAAC;IAC/CJ,OAAO,GAAGN,IAAI,CAACY,GAAG,CAAC,CAAC,EAAEN,OAAO,GAAGK,aAAa,CAAC;IAC9CJ,aAAa,IAAII,aAAa;EAClC;EACA,OAAO;IAAEJ,aAAa;IAAED;EAAQ,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}